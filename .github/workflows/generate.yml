name: Software packs
on:
  workflow_dispatch:

jobs:

  Prepare:

    name: Prepare
    runs-on: ubuntu-latest
    #if: ${{ github.repository_owner == 'armbian' }}
    outputs:
      matrix: ${{steps.list_dirs.outputs.matrix}}
      board: ${{steps.list_dirs.outputs.board}}
    steps:

      - name: Checkout build framework
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          path: distribution

      - name: Prepare matrix
        id: list_dirs
        run: |
          FILENAME="targets.conf"
          MATRIX="cat build/config/"${FILENAME}" | grep -v \"^$\" | grep -v \"^#\" | cut -f1 -d ' ' | sort | uniq"
          MATRIX="echo -en \"odroidn2\\nuefi-x86\""
          echo ::set-output name=board::$(for x in $(eval $MATRIX); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
          echo ::set-output name=matrix::$(for x in $(ls -1 distribution/images); do echo $x; done|jq -cnR '[inputs | select(length>0)]' | jq)
          
  Build:
  
    needs: [ Prepare ]
    runs-on: [ubuntu-latest]
    if: ${{ needs.Prepare.outputs.matrix != '[]' && needs.Prepare.outputs.matrix != '' }}
    timeout-minutes: 480
    strategy:
      fail-fast: false
      matrix: 
        node: ${{fromJson(needs.Prepare.outputs.matrix)}}
        board: ${{fromJson(needs.Prepare.outputs.board)}}
    steps:
   
      - name: Checkout build framework
        uses: actions/checkout@v3
        with:
          repository: armbian/build
          path: build

      - name: Checkout support scripts
        uses: actions/checkout@v3
        with:
          repository: armbian/scripts
          path: scripts
   
      - name: Checkout software distribution
        uses: actions/checkout@v3
        with:
          path: distribution
   
      - name: Pull Docker image
        run: |
          sudo docker pull ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-$(dpkg --print-architecture)"
   
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:

          gpg-private-key: ${{ secrets.GPG_KEY1 }}
          passphrase: ${{ secrets.GPG_PASSPHRASE1 }}
          workdir: scripts
          git-user-signingkey: true
          git-commit-gpgsign: true
   
      - name: Preparing
        run: |

          mkdir -p build/userpatches
          sudo touch build/.ignore_changes
          
          sudo cp build/config/templates/* build/userpatches/          
          sudo cp -R distribution/images/${{ matrix.node }} build/userpatches/
          sudo sed -i "s/^#DOCKER_FLAGS+=(--privileged)/DOCKER_FLAGS+=(--privileged)/" build/userpatches/config-docker.conf
          sudo sed -i "s/^VERSION=.*/VERSION=\$(cat \$SRC\/VERSION | cut -d\".\" -f1-2)\"-\$(dpkg --print-architecture)\"/" build/userpatches/config-docker.conf
          sudo sed -i "s/^BASE_IMAGE=.*/BASE_IMAGE=\"ubuntu:jammy\"/" build/userpatches/config-docker.conf
          sudo sed -i 's/armbian:/ghcr.io\/armbian\/build:/g' build/userpatches/config-docker.conf 
          sudo sed -i "s/ -it/ -i/" build/userpatches/config-docker.conf
          OLD="ghcr.io/armbian/build:$(cat build/VERSION  | cut -d"." -f1-2)"-$(dpkg --print-architecture)
          sudo cp scripts/VERSION build/VERSION
          sudo docker tag $OLD ghcr.io/armbian/build:$(cat build/VERSION | cut -d"." -f1-2)-$(dpkg --print-architecture)
          ls -l build/userpatches
          
      - name: Build
        run: |

          BOARD=${{ matrix.board }}
          APP=${{ matrix.node }}
          VERSION=$(cat build/VERSION)

          cd build
         
          ./compile.sh docker \
          BETA="no" \
          RELEASE="focal" \
          BUILD_DESKTOP="no" \
          BUILD_MINIMAL="yes" \
          KERNEL_ONLY="no" \
          VENDOR="Armbian_${APP^}" \
          KERNEL_CONFIGURE="no" \
          COMPRESS_OUTPUTIMAGE="xz" \
          FORCE_USE_RAMDISK="yes" \
          FAST_CREATE_IMAGE="yes" \
          BOARD="${BOARD}" \
          USE_TORRENT="yes" \
          USE_MAINLINE_GOOGLE_MIRROR="yes" \
          BRANCH="current" \
          SKIP_EXTERNAL_TOOLCHAINS="yes" \
          OFFLINE_WORK="yes" \
          BSPFREEZE="yes" \
          REPOSITORY_INSTALL="u-boot,kernel,armbian-config,armbian-bsp,armbian-firmware" \
          EXPERT="yes"

          cd output/images
          mv *.xz "${APP^}"_"${BOARD^}"_Armbian_"${VERSION}".img.xz
          sha256sum "${APP^}"_"${BOARD^}"_Armbian_"${VERSION}".img.xz > "${APP^}"_"${BOARD^}"_Armbian_"${VERSION}".img.xz.sha
          echo ${{ secrets.GPG_PASSPHRASE1 }} | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes *.img.xz

      - name: Declare vars
        id: vars
        shell: bash
        run: |
          cd build
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=timenow::$(date +'%Y-%m-%d')"

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: uefi-x86/nightly
          files: build/output/images/*
          draft: false
          prerelease: false
          name: test
          repository: igorpecovnik/distribution
